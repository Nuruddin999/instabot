[{"C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\index.js":"1","C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\App.js":"2","C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\reportWebVitals.js":"3","C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\LastAccTable.js":"4","C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\TalkersTable.js":"5","C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\SubscribedTable.js":"6","C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\Pick.js":"7","C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\Subscribe.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":4348,"mtime":1610551339553,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":3082,"mtime":1610469611465,"results":"13","hashOfConfig":"10"},{"size":2552,"mtime":1609971638594,"results":"14","hashOfConfig":"10"},{"size":2547,"mtime":1610724946112,"results":"15","hashOfConfig":"10"},{"size":4552,"mtime":1610725572612,"results":"16","hashOfConfig":"10"},{"size":2474,"mtime":1610551492084,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"c32n2i",{"filePath":"21","messages":"22","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},"C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\index.js",[],["39","40"],"C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\App.js",["41","42","43","44","45","46","47","48","49"],"import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport {useEffect, useRef, useState} from \"react\"\nimport axios from \"axios\"\nimport  io  from 'socket.io-client';\nimport Button from '@material-ui/core/Button';\nimport StickyHeadTable from './LastAccTable';\nimport StickyTalkersTable from './TalkersTable';\nimport StickySubscribedTable from './SubscribedTable';\nimport Pick from './Pick';\nimport Subscribe from './Subscribe';\nconst socket = io(\"http://localhost:4000\");\nfunction App() {\nconst [state,setState]=useState({socketConnected:false,added:[],target_accaunt:\"\",last_accaunts:[],subscribed:[],isPickTalkers:true,isSubscribe:true,subscribeFinished:false,currentIndex:\"\"})\n// const handleChange=(e)=>{\n//   setState(state=>({...state,target_accaunt:e.target.value}));\n// }\n// const startOperation=async()=>{\n//   setState(state=>({...state,isSubscribe:false}));\n//  let result= await axios.post(\"http://localhost:4000/sendlastacc\",{name:state.target_accaunt,date:new Date()})\n//  let getUpdatedList=await getLastAcc()\n//  setState(state=>({...state,added:[]}));\n//  axios.get(\"http://localhost:4000/getTalkers\",{ params: {\n//   target_accaunt: state.target_accaunt\n// }})\n// }\nconst getLastAcc=async()=>{\nlet result=await axios.get(\"http://localhost:4000/getlastacc\")\nsetState(state=>({...state,last_accaunts:result.data}));\n}\nconst stopOperation=(operation)=>{\n  axios.get(\"http://localhost:4000/stopgetTalkers\")\nswitch(operation){\n  case \"talkers\":\n    setState(state=>({...state,isSubscribe:true}));\n  case \"subscribe\":\n    setState(state=>({...state,isPickTalkers:true}));\n}\n}\nconst startSubscribe=async()=>{\n  setState(state=>({...state,isPickTalkers:false}));\nlet result =await axios.get(\"http://localhost:4000/subscribe\")\n\n}\n\nuseEffect(() => {\n  socket.open()\n    socket.on('added', (data) => {\n      // we get settings data and can do something with it\n      console.log(\"sockets data \"+ data)\n      setState(state=>({...state,added:[...state.added,data]}));\n    })\n    socket.on('subscribed', (data) => {\n      // we get settings data and can do something with it\n      console.log(\"sockets data \"+ data)\n      setState(state=>({...state,subscribed:[...state.subscribed,data]}));\n    })  \n    socket.on('subscribeFinished', (data) => {\n      // we get settings data and can do something with it\n      console.log(\"sockets data \"+ data)\n      setState(state=>({...state,subscribeFinished:true}));\n    })\n    socket.on(\"currentIndex\", (data) => {\n      // we get settings data and can do something with it\n      setState(state=>({...state,currentIndex:data}));\n    })\n    getLastAcc()\n  return ()=>socket.close()\n}, [])\n\n\nreturn <Router>\n<div className=\"App\">\n\n<nav>\n<div className=\"navlinks\">\n   <Link to=\"/pick\"><Button  variant=\"contained\" color=\"primary\">Собрать</Button></Link>\n  <Link to=\"/subscribe\"><Button variant=\"contained\" className=\"subs-btn\">Подписка</Button></Link>\n</div>\n \n</nav>\n    <Switch>\n          <Route path=\"/pick\">\n        <Pick stop={stopOperation}/>\n          </Route>\n          <Route path=\"/subscribe\">\n        <Subscribe stop={stopOperation}/>\n          </Route>\n        </Switch>\n{/* <input placeholder={\"введите название аккаунта\"}  value={state.target_accaunt} onChange={handleChange}/>\n<button onClick={startOperation}> Начать</button>\n<button onClick={()=>stopOperation(\"talkers\")}>Остановить</button>\n{state.isPickTalkers ?<div className=\"datablock\">\n\n  <div>\n  <h6>Добавленные комментаторы</h6> \n <StickyTalkersTable  list={state.added} />  \n  </div>\n  <div> \n  <h6>Журнал аккаунтов</h6> \n <StickyHeadTable   list={state.last_accaunts} />\n  </div>\n \n</div> :null} */}\n{/* {state.isSubscribe ?<React.Fragment>\n   <h5>Подписка на комментаторов</h5> \n   <button onClick={startSubscribe}> Начать</button>\n<button onClick={()=>stopOperation(\"subscribe\")}>Остановить</button>\n  <div>\n  {state.subscribeFinished ? <span>Все добавлены</span>:null}\n  <span>{state.currentIndex}</span>\n  <h6>Добавленные комментаторы</h6> \n <StickySubscribedTable  list={state.subscribed} />  \n  </div>\n</React.Fragment>:null} */}\n\n</div>\n</Router>\n  \n}\n\nexport default App;\n","C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\reportWebVitals.js",[],"C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\LastAccTable.js",[],"C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\TalkersTable.js",[],"C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\SubscribedTable.js",[],"C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\Pick.js",["50","51","52","53","54"],"import React from \"react\";\r\nimport axios from \"axios\";\r\nimport io from \"socket.io-client\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport StickyHeadTable from \"./LastAccTable\";\r\nimport StickyTalkersTable from './TalkersTable';\r\nimport PlayCircleOutlineSharpIcon from '@material-ui/icons/PlayCircleOutlineSharp';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\nconst socket = io(\"http://localhost:4000\");\r\nconst Pick = ({ stop }) => {\r\n  const [state, setState] = useState({\r\n    target_accaunt: \"\",\r\n    last_accaunts: [],\r\n    added: [],\r\n    open: false,\r\n    picked:\"\",\r\n    all_talkers:[],\r\n    isPlayPressed:false\r\n  });\r\n  const handleChange = (e) => {\r\n    setState((state) => ({ ...state, target_accaunt: e.target.value }));\r\n  };\r\n  const startOperation = async () => {\r\n    if (!state.target_accaunt) {\r\n      setState((state) => ({ ...state, open: true }));\r\n      return;\r\n    }\r\nelse if(state.isPlayPressed){\r\n  return\r\n}\r\n    let result = await axios.post(\"http://localhost:4000/sendlastacc\", {\r\n      name: state.target_accaunt,\r\n      date: new Date(),\r\n    });\r\n    let getUpdatedList = await getLastAcc();\r\n    setState((state) => ({ ...state, added: [],isPlayPressed:true }));\r\n    axios.get(\"http://localhost:4000/getTalkers\", {\r\n      params: {\r\n        target_accaunt: state.target_accaunt,\r\n      },\r\n    });\r\n  };\r\n  const stopOperation=()=>{\r\n    stop(\"talkers\")\r\n    setState((state) => ({ ...state, isPlayPressed:false }));\r\n  }\r\n  const getLastAcc = async () => {\r\n    let result = await axios.get(\"http://localhost:4000/getlastacc\");\r\n    setState((state) => ({ ...state, last_accaunts: result.data }));\r\n  };\r\n  const deleteLastAcc = async (name) => {\r\n    let result = await axios.delete(\r\n      `http://localhost:4000/lastacc/delete/${name}`\r\n    );\r\n    if (result) {\r\n      await getLastAcc();\r\n    }\r\n  };\r\n  const getAddedTalkers=async()=>{\r\n    let list=[]\r\n    let result = await axios.get(\"http://localhost:4000/alltalkers\");\r\n   result.data.forEach(el=>list.push(el.name))\r\n    setState((state) => ({ ...state, all_talkers: list }));\r\n  }\r\n  const deleteAlltalkers=async()=>{\r\n    let result = await axios.delete(\r\n      `http://localhost:4000/alltalkers/delete`\r\n    );\r\n    if (result) {\r\n      setState((state) => ({ ...state, all_talkers: [] }));\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    socket.open();\r\n    socket.on(\"added\", (data) => {\r\n      // we get settings data and can do something with it\r\n      console.log(\"sockets data \" + data);\r\n      setState((state) => ({ ...state, added: [...state.added, data] }));\r\n    });\r\n    socket.on(\"picked\", (data) => {\r\n        // we get settings data and can do something with it\r\n        console.log(\"sockets data \" + data);\r\n        setState((state) => ({ ...state, picked:data }));\r\n      });\r\n    getLastAcc();\r\n    getAddedTalkers()\r\n    return () => {\r\n      stop(\"talkers\");\r\n      socket.close();\r\n    };\r\n  }, []);\r\n  useEffect(() => {\r\n    if (state.open) {\r\n      setTimeout(() => setState((state) => ({ ...state, open: false })), 1000);\r\n    }\r\n  }, [state.open]);\r\n  return (\r\n    <div>\r\n    <div className=\"subscribe-bar\">\r\n    <TextField\r\n        placeholder={\"введите название аккаунта\"}\r\n        value={state.target_accaunt}\r\n        onChange={handleChange}\r\n        \r\n      />\r\n      <div className=\"subscribe-buttons\">\r\n         <PlayCircleOutlineSharpIcon onClick={startOperation}/>\r\n      <StopIcon onClick={() => stop(\"talkers\")}/>   \r\n      <DeleteForeverIcon  className=\"subscribe-deletebtn\"  onClick={deleteAlltalkers}/>\r\n      </div>\r\n    \r\n      <div>{state.open ? <span>Введите целевой аккаунт</span> : null}</div>\r\n    </div>\r\n    \r\n      <div className=\"datablock\">\r\n        <div>\r\n          <h6>Добавленные комментаторы</h6>\r\n          {state.picked ? <span>{state.picked}</span>:null}\r\n          <StickyTalkersTable list={state.added} />\r\n        </div>\r\n        <div>\r\n          <h6>Список комментаторов</h6>\r\n          {state.picked ? <span>{state.picked}</span>:null}\r\n          <StickyTalkersTable list={state.all_talkers} />\r\n        </div>\r\n        <div>\r\n          <h6>Журнал аккаунтов</h6>\r\n          <StickyHeadTable\r\n            list={state.last_accaunts}\r\n            deleteAcc={deleteLastAcc}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Pick;\r\n","C:\\Users\\sg772\\OneDrive\\Документы\\проекты\\instabot\\client\\src\\Subscribe.js",["55","56"],"import React from 'react'\r\nimport axios from \"axios\"\r\nimport  io  from 'socket.io-client';\r\nimport {useEffect, useState} from \"react\"\r\nimport StickySubscribedTable from './SubscribedTable';\r\nimport PlayCircleOutlineSharpIcon from '@material-ui/icons/PlayCircleOutlineSharp';\r\nimport StopIcon from '@material-ui/icons/Stop';\r\nconst socket = io(\"http://localhost:4000\");\r\nconst Subscribe = ({stop}) => {\r\n    const [state,setState]=useState({socketConnected:false,subscribed:[],subscribeFinished:false,currentIndex:\"\",isEmpty:\"\"})\r\n    const startSubscribe=async()=>{\r\n        setState(state=>({...state,isPickTalkers:false}));\r\n      let result =await axios.get(\"http://localhost:4000/subscribe\")\r\n      \r\n      }\r\n      useEffect(() => {\r\n        socket.open()\r\n          socket.on('subscribed', (data) => {\r\n            // we get settings data and can do something with it\r\n            console.log(\"sockets data \"+ data)\r\n            setState(state=>({...state,subscribed:[...state.subscribed,data]}));\r\n          })  \r\n          socket.on('subscribeFinished', (data) => {\r\n            // we get settings data and can do something with it\r\n            console.log(\"sockets data \"+ data)\r\n            setState(state=>({...state,subscribeFinished:true}));\r\n          })\r\n          socket.on(\"currentIndex\", (data) => {\r\n            // we get settings data and can do something with it\r\n            setState(state=>({...state,currentIndex:data}));\r\n          })\r\n          socket.on(\"talkers_empty\",(data) => {\r\n            // we get settings data and can do something with it\r\n            setState(state=>({...state,isEmpty:data}));\r\n          })\r\n        return ()=>{\r\n            stop(\"subscribe\")\r\nsocket.close()\r\n        }\r\n      }, [])\r\n    return (\r\n        <div>\r\n        <div className=\"subscribe-bar\">\r\n        <span>Подписка на комментаторов</span> \r\n        <div className=\"subscribe-buttons\">\r\n             <PlayCircleOutlineSharpIcon onClick={startSubscribe}/>\r\n<StopIcon onClick={()=>stop(\"subscribe\")}/>\r\n        </div>\r\n\r\n<span>{state.currentIndex}</span>\r\n        </div>\r\n    <div>\r\n  {state.isEmpty ? <span>{state.isEmpty}</span>:null}\r\n  {state.subscribeFinished ? <span>Все добавлены</span>:null}\r\n  <h6>Добавленные комментаторы</h6> \r\n  <div className=\"subs-table\">\r\n <StickySubscribedTable  list={state.subscribed} /> \r\n  </div>\r\n \r\n  </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Subscribe\r\n",["57","58"],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":9,"column":20,"nodeType":"65","messageId":"66","endLine":9,"endColumn":26},{"ruleId":"63","severity":1,"message":"67","line":13,"column":8,"nodeType":"65","messageId":"66","endLine":13,"endColumn":23},{"ruleId":"63","severity":1,"message":"68","line":14,"column":8,"nodeType":"65","messageId":"66","endLine":14,"endColumn":26},{"ruleId":"63","severity":1,"message":"69","line":15,"column":8,"nodeType":"65","messageId":"66","endLine":15,"endColumn":29},{"ruleId":"63","severity":1,"message":"70","line":20,"column":8,"nodeType":"65","messageId":"66","endLine":20,"endColumn":13},{"ruleId":"71","severity":1,"message":"72","line":39,"column":1,"nodeType":"73","messageId":"74","endLine":44,"endColumn":2},{"ruleId":"75","severity":1,"message":"76","line":42,"column":3,"nodeType":"77","messageId":"78","endLine":43,"endColumn":54},{"ruleId":"63","severity":1,"message":"79","line":46,"column":7,"nodeType":"65","messageId":"66","endLine":46,"endColumn":21},{"ruleId":"63","severity":1,"message":"80","line":48,"column":5,"nodeType":"65","messageId":"66","endLine":48,"endColumn":11},{"ruleId":"63","severity":1,"message":"64","line":4,"column":21,"nodeType":"65","messageId":"66","endLine":4,"endColumn":27},{"ruleId":"63","severity":1,"message":"80","line":33,"column":9,"nodeType":"65","messageId":"66","endLine":33,"endColumn":15},{"ruleId":"63","severity":1,"message":"81","line":37,"column":9,"nodeType":"65","messageId":"66","endLine":37,"endColumn":23},{"ruleId":"63","severity":1,"message":"82","line":45,"column":9,"nodeType":"65","messageId":"66","endLine":45,"endColumn":22},{"ruleId":"83","severity":1,"message":"84","line":93,"column":6,"nodeType":"85","endLine":93,"endColumn":8,"suggestions":"86"},{"ruleId":"63","severity":1,"message":"80","line":13,"column":11,"nodeType":"65","messageId":"66","endLine":13,"endColumn":17},{"ruleId":"83","severity":1,"message":"84","line":40,"column":10,"nodeType":"85","endLine":40,"endColumn":12,"suggestions":"87"},{"ruleId":"59","replacedBy":"88"},{"ruleId":"61","replacedBy":"89"},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'StickyHeadTable' is defined but never used.","'StickyTalkersTable' is defined but never used.","'StickySubscribedTable' is defined but never used.","'state' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'startSubscribe' is assigned a value but never used.","'result' is assigned a value but never used.","'getUpdatedList' is assigned a value but never used.","'stopOperation' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'stop'. Either include it or remove the dependency array. If 'stop' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["92"],["93"],["90"],["91"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"94","fix":"96"},"Update the dependencies array to be: [stop]",{"range":"97","text":"98"},{"range":"99","text":"98"},[3044,3046],"[stop]",[1736,1738]]